[
  // Show console with cmd+$ instead of the irritating normal one using backtricks.
  {"keys": ["super+$"], "command": "show_panel", "args": {"panel": "console", "toggle": true}},

  // Move to BOF/EOF in emacs-like fashion.
  {"keys": ["super+<"], "command": "move_to", "args": {"to": "bof"}},
  {"keys": ["super+shift+<"], "command": "move_to", "args": {"to": "eof"}},

  // When accidentally closing a file it's handy to be able to open it right away.
  { "keys": ["super+ctrl+t"], "command": "reopen_last_file" },

  // Luxion related.
  { "keys": ["super+ctrl+w"], "command": "wrap_luxion_function" },

  // Custom related.
  { "keys": ["super+alt+space"], "command": "cycle_spacing"},
  { "keys": ["ctrl+x", "ctrl+o"], "command": "delete_blank_lines"},
  { "keys": ["ctrl+a"], "command": "smart_beginning_of_line"},
  { "keys": ["ctrl+l"], "command": "recenter_top_bottom"},

  // Title case "hello" -> "Hello".
  { "keys": ["super+k", "super+c"], "command": "title_case"},

  // Show "Build Results" panel, which doesn't have a binding by default.
  { "keys": ["super+alt+b"], "command": "show_panel", "args": {"panel": "output.exec"} },

  // Move By Paragraph package.

  // Move paragraph up/down.
  {"keys": ["ctrl+up"], "command": "move_by_paragraph", "args": {"forward": false}},
  {"keys": ["ctrl+down"], "command": "move_by_paragraph", "args": {"forward": true}},

  // Move paragraph up/down and expand selection.
  {"keys": ["super+shift+up"], "command": "move_by_paragraph",
    "args": {"forward": false, "extend": true}},
  {"keys": ["super+shift+down"], "command": "move_by_paragraph",
    "args": {"forward": true, "extend": true}},

  // SublimeLinter package: Add key-binding for show line errors.
  { "keys": ["super+ctrl+shift+l"], "command": "sublime_linter_line_report" },

  // SublimeHaskell package.
  {
    "keys": ["super+alt+h"],
    "command": "show_panel",
    "args": { "panel": "output.sublime_haskell_output_panel" }
  },

  // Clang Format package: Change default key-bindings.
  // cmd+alt+f -> format selection
  // cmd+alt+shift+f -> format whole buffer
  { "keys": ["super+option+f"], 
    "command": "clang_format",
    "context": [
      {"key": "selector", "operator": "equal", "operand": "source.c++"}
    ],
  },
  { "keys": ["super+option+shift+f"], 
    "command": "clang_format", 
    "args": {"whole_buffer": true},
    "context": [
      {"key": "selector", "operator": "equal", "operand": "source.c++"}
    ],
  },

  { "keys": ["super+option+f"], "command": "clang_format",
    "context": [
      {"key": "selector", "operator": "equal", "operand": "source.c"}
    ],
  },
  { "keys": ["super+option+shift+f"], 
    "command": "clang_format", 
    "args": {"whole_buffer": true},
    "context": [
      {"key": "selector", "operator": "equal", "operand": "source.c"}
    ],
  },

  { "keys": ["super+option+f"], "command": "clang_format",
    "context": [
      {"key": "selector", "operator": "equal", "operand": "source.js"}
    ]
  },
  { "keys": ["super+option+shift+f"], 
    "command": "clang_format", 
    "args": {"whole_buffer": true},
    "context": [
      {"key": "selector", "operator": "equal", "operand": "source.js"}
    ],
  },
]
